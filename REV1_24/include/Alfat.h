/* ========================================
 * Copyright InstroTek, THE YEAR
 * All Rights Reserved
 * UNPUBLISHED, LICENSED SOFTWARE.
 *
 * CONFIDENTIAL AND PROPRIETARY INFORMATION
 * WHICH IS THE PROPERTY OF InstroTek.
 * ========================================
*/


#ifndef ALFAT_HEADER
#define ALFAT_HEADER

#include <stddef.h>
#include "stdbool.h"
#include <stdio.h>
#include "AlfatUart.h"  // contains definitions for uart functions
#include "Elite.h"
#include "prompts.h"

#define alfatRxBufSize 255

//#define ALFATMENU(S) AlfatStr[eepromData.language][S]
//#define ALFATCENTER(A,B) DisplayStrCentered(A,AlfatStr[eepromData.language][B])

enum { ALFATOPENFILE,ALFATWRITING,ALFATREADING,ALFATREAD,ALFATFAILED,PRESSESC,USBNOTIN,INSERTUSB,TRYAGAIN,NOTFOUND,ALFATMOUNT };

enum {XMLDEF,XMLDEFBOARDERS,XMLDEFLEFT,XMLBLKBLD11,XMLBLKBLD11LEFT,XMLBLKBLD14LEFT,XMLBLKBLD11YELLOW,XMLBLKBLD11RED,XMLBLKBLD11GREEN};

//extern char *AlfatStr[FRENCH + 1][ALFATMOUNT + 1];

// Defines Dependent on your particular IC or application
#ifdef CYDEV_CHIP_FAMILY_PSOC5
   //#define ALFAT_DEBUG                                         // Writes debug to lcd on dev kit
 //  extern volatile uint8 AlfatUart_rxBufferRead;
 //  extern volatile uint8 AlfatUart_rxBufferWrite;
   #define ALFAT_PutChar         AlfatUart_PutChar                // function generated by cypress
   #define ALFAT_GetByte         AlfatUart_GetByte                // function generated by cypress STATUS IN HIGH BYTE
   #define ALFAT_PutArray        AlfatUart_PutArray               // function generated by cypress
   #define ALFAT_PutString       AlfatUart_PutString              // function generated by cypress
   #define ALFAT_RX_NOTEMPTY     ((uint16)AlfatUart_RX_STS_FIFO_NOTEMPTY << 8)   // bit flag generated by cypress
   #define GUAGE_RX_NOTEMPTY     ((uint16)GuageUart_RX_STS_FIFO_NOTEMPTY << 8)   // bit flag generated by cypress
#endif   

#define FAT32_MAX_FILENAME_LENGTH 128

#define ALFAT_FILE_ATR_RESVD0  0x80 // Reserved 
#define ALFAT_FILE_ATR_RESVD1  0x40 // Reserved 
#define ALFAT_FILE_ATR_ARCH    0x20 // Archive 
#define ALFAT_FILE_ATR_FOLD    0x10 // Folder
#define ALFAT_FILE_ATR_VOL_ID  0x08 // Volume ID
#define ALFAT_FILE_ATR_SYS     0x04 // System 
#define ALFAT_FILE_ATR_HIDDEN  0x02 // Hidden 
#define ALFAT_FILE_ATR_RD_ONLY 0x01 // ReadOnly

#define ALFAT_MOUNT_MEMORY_CARD "M"
#define ALFAT_MOUNT_USB0_FULL   "U0"
#define ALFAT_MOUNT_USB1_FULL   "U1"
#define ALFAT_MOUNT_USB1_HIGH   "U1:H"

// ALFAT STATUS BITS
#define ALFAT_MC_DETECTED  0x01 //Reads Card Detect pin status (CD) 0: Memory card not detected 1: Memory card detected
#define ALFAT_SD_WR_PROT   0x02 //Reads SD Write Protection pin status (WP) 0: SD Card not protect 1: SD Card protect
#define ALFAT_USB0_MOUNT   0x04 //0: USB0 is not mounted (or it was disconnected after it's being mounted) 1: USB0 is mounted
#define ALFAT_USB1_MOUNT   0x08 //0: USB1 is not mounted (or it was disconnected after it's being mounted) 1: USB1 is mounted
#define ALFAT_USB1_HSPEED  0x10 //0: USB1 is in Full Speed mode. 1: USB1 is in High Speed mode.
#define ALFAT_USB0_ATTCHD  0x20 //0: USB0 is not attached. 1: USB0 is attached.
#define ALFAT_USB1_ATTCHD  0x40 //0: USB1 is not attached. 1: USB1 is attached.
#define ALFAT_RESERVED_BIT 0x80 //Reserved

#define ALFAT_ERROR_FLAG      0x8000 // lower 8 bits will be filled in with alfat error
#define ALFAT_TIMEOUT_FLAG    0x4000 // did not receive an answer from alfat
#define ALFAT_DOLLAR_FLAG     0x2000 // got a string that starts with $

#define ALFAT_DISABLE_ECHO    0
#define ALFAT_ENABLE_ECHO     1

#define ALFAT_STANDBY_MODE    0
#define ALFAT_STOP_MODE       1

#define ALFAT_RTC_SHARED_MODE 0
#define ALFAT_RTC_BACKUP_MODE 1

#define ALFAT_FILE_OPEN_READ   'R'
#define ALFAT_FILE_OPEN_WRITE  'W'
#define ALFAT_FILE_OPEN_APPEND 'A'
 
#define ALFAT_ERR_SUCCESS           0x3030 //Command successful.
#define ALFAT_ERR_UNKNOWN_COMMAND   0x3130 //Unknown command.
#define ALFAT_ERR_INCORRECT_PARAM   0x3230 //Incorrect parameters.
#define ALFAT_ERR_OPERATION_FAILED  0x3330 //Operation failed. This error code is returned also if the user attempted to write to
                                           //write-protected card.
#define ALFAT_ERR_EOF               0x3430 //Reached the end of the file/folder list. This is not an error.
#define ALFAT_ERR_MEDIA_WONT_INTIT  0x3031 //Media does not initialize.
#define ALFAT_ERR_INIT_FAILED       0x3131 //Initialize media failed. This error code is returned also if the card detect signal is high
                                         //or floating, check Card Detect and Write Protect signals section for more details.
#define ALFAT_ERR_FILE_DOESNT_EXIST 0x3032 //File/folder doesn't exist.
#define ALFAT_ERR_OPEN_FAILED       0x3132 //Failed to open the file.
#define ALFAT_ERR_SEEK_REQ_RDMODE   0x3232 //Seek only runs on files open for read.
#define ALFAT_ERR_SEEK_VAL_TOO_BIG  0x3332 //Seek value can only be within the file size.
#define ALFAT_ERR_NAME_CANT_BE_0    0x3432 //File name can't be zero.
#define ALFAT_ERR_NAME_FORBIDDEN    0x3532 //File name has forbidden character.
#define ALFAT_ERR_FILE_ALRDY_EXISTS 0x3632 //File/folder name already exists.
#define ALFAT_ERR_INVALID_HNDL      0x3033 //Invalid handle.
#define ALFAT_ERR_SRC_WONT_OPEN     0x3133 //Handle source does not open.
#define ALFAT_ERR_DEST_WONT_OPEN    0x3233 //Handle destination does not open.
#define ALFAT_ERR_SRC_REQ_RDMODE    0x3333 //Handle source requires file open for read mode..
#define ALFAT_ERR_DEST_REQ_WRMODE   0x3433 //Handle destination requires file open for write or append mode.
#define ALFAT_ERR_NO_HNDL_AVAIL     0x3533 //No more handle available.
#define ALFAT_ERR_HNDL_WONT_OPEN    0x3633 //Handle does not open.
#define ALFAT_ERR_HNDL_IN_USE       0x3733 //Handle is already in use.
#define ALFAT_ERR_OPEN_MODE_INVALID 0x3833 //Open file mode invalid.
#define ALFAT_ERR_HNDL_REQ_WRMODE   0x3933 //Handle requires write or append mode.
#define ALFAT_ERR_HNDL_REQ_RDMODE   0x4133 //Handle requires read mode.
#define ALFAT_ERR_BUSY              0x3034 //The system is busy.
#define ALFAT_ERR_SPIONLY           0x3134 //Command is supported with SPI interface only.
#define ALFAT_ERR_BOOTLDR           0x4646 //Boot Loader indication code.

typedef struct FILE_ENTRY
{
   char *fname;                           // pointer to full path to file
   char dateTimeMod[32];                  // string of date/time last modified
   uint8 attributes;
   uint32 fileSize;
} FILE_ENTRY;

typedef struct FILE_PARAMETERS
{
    FILE_ENTRY fileAttr;  
    char mode;                // 'R','W','A' NOT "R"
    unsigned char fileHandle; // 0-15
    bool opened;              // true = opened, false = closed
    uint8 *dataBuffer;        // pointer to buffer for read and writes
    int32 numBytes;           // number bytes to read/write
    char fillerChar;          // filler character for reads
} FILE_PARAMETERS;

typedef struct UINT_BITFIELDS
{
   unsigned Second2 : 5;   // Seconds divided by 2 (0..30)
   unsigned Minute : 6;    // 0-59
   unsigned Hour : 5;      // 0-23
   unsigned Day : 5;       // 1-31
   unsigned Month : 4;     // 1-12
   unsigned Years : 7;     // Years since 1980
} UINT_BITFIELDS;

typedef union ALFAT_DATE_TIME_UNION
{
   uint32 dateTimeUint32;
   UINT_BITFIELDS dateTimeBits;
} ALFAT_DATE_TIME_UNION;

typedef struct ALFAT_QUERY
{
   char *response;   // pointer to buffer to hold response
   uint16 bufLen;    // length of buffer
} ALFAT_QUERY;

// Public Functions
CY_ISR(AlfatRxISR);
void AlfatStart();
void AlfatStop();
void AlfatDiag(void);
uint16 AlfatCopyFile(char fpSource,char fpDest,int32 index, int32 len); // copy bytes from one file to another
uint16 AlfatFindFile(FILE_ENTRY *fe);                                   // Find File
uint16 AlfatRenameFile(uint8 *path,uint8 *newName);                     // Rename Folder
uint16 AlfatDeleteFolder(uint8 *path);                                  // Delete Folder
uint16 AlfatDeleteFile(uint8 *path);                                    // Delete File
uint16 AlfatFileTell(uint8 FileHandle,uint32 *pos);                     // Get file position
uint16 AlfatFileSeek(uint8 FileHandle,uint32 seek);                     // Move file position to seek value
uint16 AlfatCloseFile(uint8 FileHandle);                                // Close file
uint16 AlfatFlushData(uint8 FileHandle);                                // Flushes data to drive
uint16 AlfatWriteToFile(FILE_PARAMETERS *fp);                           // Write bytes to file
uint16 AlfatReadFromFile(FILE_PARAMETERS *fp);                          // Read bytes from file
uint16 AlfatFileOpen(FILE_PARAMETERS *fp);                              // Open file for read,write,append
uint16 AlfatGetNextDirectoryEntry(FILE_ENTRY *fe);                      // Get next entry, must be preceded by AlfatInitFilesFoldersList
uint16 AlfatInitFilesFoldersList(char *path);                           // Initialize file or folder requires full path
uint16 AlfatGetFreeSize(uint64 *freeSize, char* drive);                 // Get free size of drive
uint32 AlfatReadStatusReg(void);                                        // Read Alfat Status
uint16 AlfatInitMntDevice(char *drive);                                 // Initialize and mount drive
uint16 AlfatSetBaudRate(uint32 baud);                                   // Set Alfat Baud Rate
uint16 AlfatGetCurrentDate(ALFAT_DATE_TIME_UNION *au);                  // Get date from Alfat
uint16 AlfatGetCurrentTime(ALFAT_DATE_TIME_UNION *au);                  // Get time from Alfat. Store it in time
uint16 AlfatSetCurrentTimeDate(uint32 time);                            // Set Current Date Time
uint16 AlfatInitializeRealTimeClock(uint8 Mode);                        // Initialize RTC
uint16 AlfatSetLowPwrMode(uint8 Mode);                                  // Set pwr mode
uint16 AlfatEnableEcho(uint8 State);                                    // Enable/Disable Echo
uint16 AlfatGetVersion(char *version);                                  // Get Version from alfat
uint16 AlfatFormat(char *drive);
uint16 AlfatTestSpeed(int32* numBytes, int32* readTime);
//char* AlfatGetErrorStr(uint8 error);                                  // Returns pointer to Error String
uint16 AlfatGetError(void);
void AlfatConvertDTunion(ALFAT_DATE_TIME_UNION au,char * str);
uint32 AlfatConvertStrAU(char *str);
uint32 AlfatGetDateTime(bool start);
void ReplaceIllegalChars(char *str);
void AlfatWriteStr(FILE_PARAMETERS *fp,char *str);
int32 AlfatOpenUSB(FILE_PARAMETERS *fp);
uint32 AlfatConvertTime(char* time);
uint32 AlfatConvertDate(char* date);
int32 AlfatOpenUSBquiet(FILE_PARAMETERS *fp);
void USB_power ( char X );
Bool initialize_USB( Bool display_error );
Bool USB_open_file ( char *filename , FILE_PARAMETERS * file)    ;
Bool USB_open_file_for_append ( FILE_PARAMETERS * file )   ;
Bool check_for_USB(void);
void initAlfat();
#endif
//[] END OF FILE



